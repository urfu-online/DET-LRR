# Generated by Django 3.2.16 on 2022-11-01 20:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('repository', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name of User')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcademicGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Создано')),
                ('last_updated', models.DateTimeField(auto_now=True, null=True, verbose_name='Последние обновление')),
                ('number', models.CharField(max_length=30, verbose_name='Номер академической группы')),
                ('eduprogram', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='eduprogram_academic_group', to='repository.eduprogram', verbose_name='Образовательная программа/Направление подготовки')),
            ],
            options={
                'verbose_name': 'академическая группа',
                'verbose_name_plural': 'академические группы',
            },
        ),
        migrations.CreateModel(
            name='ChoicesExpert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('METHODICAL', 'Методическая'), ('CONTENT', 'Содержательная'), ('TECH', 'Техническая')], max_length=30, verbose_name='Вид экспертизы')),
            ],
            options={
                'verbose_name': 'тип экспертизы',
                'verbose_name_plural': 'типы экспертиз',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(blank=True, max_length=150, null=True, verbose_name='Адрес проживания')),
                ('date_birthday', models.DateTimeField(blank=True, null=True, verbose_name='Дата рождения')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Город')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Отчество')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Страна')),
                ('first_name', models.CharField(blank=True, max_length=45, null=True, verbose_name='Имя')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='upload/images/', verbose_name='Изображение профиля')),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Фамилия')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='person', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'профиль',
                'verbose_name_plural': 'профили',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('academic_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='users.academicgroup', verbose_name='Номер академической группы')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.person')),
            ],
            options={
                'verbose_name': 'студент',
                'verbose_name_plural': 'студенты',
            },
        ),
        migrations.CreateModel(
            name='GroupDisciplines',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Последние обновление')),
                ('semestr', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Семестр')),
                ('academic_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.academicgroup', verbose_name='Академическая группа')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='repository.subject', verbose_name='Дисциплина(ы)')),
            ],
            options={
                'verbose_name': 'дисциплина группы',
                'verbose_name_plural': 'дисциплины групп',
            },
        ),
        migrations.CreateModel(
            name='Expert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subdivision', models.CharField(max_length=500, verbose_name='Подразделение/отрасль')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.person', verbose_name='Пользователь')),
                ('types', models.ManyToManyField(blank=True, to='users.ChoicesExpert', verbose_name='Вид экспертизы')),
            ],
            options={
                'verbose_name': 'эксперт',
                'verbose_name_plural': 'эксперты',
            },
        ),
    ]
