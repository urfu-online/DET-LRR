# Generated by Django 3.2.6 on 2021-09-10 11:26

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import smart_selects.db_fields
import sortedm2m.fields
import uuid


class Migration(migrations.Migration):

    replaces = [('complexes', '0012_auto_20210430_0822'), ('complexes', '0013_auto_20210517_1044'), ('complexes', '0014_digitalcomplex_form_control'), ('complexes', '0015_auto_20210621_0856'), ('complexes', '0016_auto_20210621_0933'), ('complexes', '0017_auto_20210621_1019'), ('complexes', '0018_auto_20210621_1023'), ('complexes', '0019_auto_20210621_1104'), ('complexes', '0020_remove_assignmentacademicgroup_academic_group_test'), ('complexes', '0021_assignmentacademicgroup_academic_group'), ('complexes', '0022_auto_20210623_1601'), ('complexes', '0013_auto_20210514_1628'), ('complexes', '0014_auto_20210514_1721'), ('complexes', '0023_merge_20210627_2143'), ('complexes', '0024_auto_20210628_1030'), ('complexes', '0023_auto_20210726_1435'), ('complexes', '0025_merge_20210822_0855'), ('complexes', '0026_auto_20210822_2240'), ('complexes', '0027_digitalcomplex_form_control'), ('complexes', '0028_digitalcomplex_form_control'), ('complexes', '0029_digitalcomplex_form_control')]

    dependencies = [
        ('users', '0020_groupdisciplines_group'),
        ('users', '0021_auto_20210621_1020'),
        ('repository', '0014_bookmarkdigitalresource'),
        ('complexes', '0011_auto_20210429_1921'),
        ('users', '0010_auto_20210518_1338'),
        ('users', '0022_remove_student_academic_group'),
        ('users', '0012_auto_20210621_0933'),
    ]

    operations = [
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Последние обновление')),
                ('type', models.CharField(choices=[('theory', 'Теория'), ('practice', 'Практика')], default='theory', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=64)),
                ('content', models.ManyToManyField(to='complexes.Container')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AlterModelOptions(
            name='cell',
            options={},
        ),
        migrations.RemoveField(
            model_name='cell',
            name='component_complexes',
        ),
        migrations.RemoveField(
            model_name='cell',
            name='include_practice',
        ),
        migrations.RemoveField(
            model_name='cell',
            name='include_theory',
        ),
        migrations.RemoveField(
            model_name='cell',
            name='methodology_description',
        ),
        migrations.RemoveField(
            model_name='cell',
            name='type',
        ),
        migrations.RemoveField(
            model_name='cell',
            name='week_range',
        ),
        migrations.AddField(
            model_name='cell',
            name='content',
            field=sortedm2m.fields.SortedManyToManyField(help_text=None, to='complexes.ComponentComplex'),
        ),
        migrations.DeleteModel(
            name='ComplexSpaceCell',
        ),
        migrations.AddField(
            model_name='cell',
            name='end_point',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='complexes.container'),
        ),
        migrations.AddField(
            model_name='cell',
            name='start_point',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='complexes.container'),
        ),
        migrations.AlterField(
            model_name='digitalcomplex',
            name='subjects',
            field=models.ManyToManyField(blank=True, related_name='subjects', to='repository.Subject', verbose_name='Дисциплина(ы)'),
        ),
        migrations.AddField(
            model_name='digitalcomplex',
            name='form_control',
            field=models.CharField(blank=True, choices=[('0', 'зачет'), ('1', 'экзамен ')], max_length=300, null=True, verbose_name='Форма контроля'),
        ),
        migrations.RemoveField(
            model_name='assignmentacademicgroup',
            name='semestr',
        ),
        migrations.RemoveField(
            model_name='assignmentacademicgroup',
            name='subject',
        ),
        migrations.AlterField(
            model_name='componentcomplex',
            name='description',
            field=models.TextField(blank=True, max_length=1024, null=True, verbose_name='Как используется при изучении дисциплины'),
        ),
        migrations.AlterField(
            model_name='platformcomponent',
            name='url',
            field=models.URLField(blank=True, null=True, verbose_name='URL'),
        ),
        migrations.RenameField(
            model_name='assignmentacademicgroup',
            old_name='academic_group',
            new_name='academic_group_test',
        ),
        migrations.RemoveField(
            model_name='assignmentacademicgroup',
            name='academic_group_test',
        ),
        migrations.AddField(
            model_name='assignmentacademicgroup',
            name='academic_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='users.academicgroup', verbose_name='Академическая группа'),
        ),
        migrations.AddField(
            model_name='assignmentacademicgroup',
            name='group_subject',
            field=smart_selects.db_fields.ChainedForeignKey(blank=True, chained_field='academic_group', chained_model_field='academic_group', null=True, on_delete=django.db.models.deletion.CASCADE, to='users.groupdisciplines', verbose_name='Дисциплина/Семестр'),
        ),
        migrations.AlterField(
            model_name='literarysourcescomponent',
            name='title',
            field=models.TextField(blank=True, max_length=424, null=True, verbose_name='Библиографическая ссылка'),
        ),
        migrations.AddField(
            model_name='theme',
            name='complex',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='thematic_plan', to='complexes.digitalcomplex'),
        ),
        migrations.AddField(
            model_name='theme',
            name='order',
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='digitalcomplex',
            name='title',
            field=models.CharField(blank=True, db_index=True, default='', max_length=150, null=True, verbose_name='Наименование комплекса'),
        ),
        migrations.AlterField(
            model_name='digitalcomplex',
            name='title',
            field=models.CharField(blank=True, default='', max_length=150, null=True, verbose_name='Наименование комплекса'),
        ),
        migrations.AlterField(
            model_name='literarysourcescomponent',
            name='title',
            field=models.TextField(blank=True, null=True, verbose_name='Библиографическая ссылка'),
        ),
        migrations.AlterField(
            model_name='platformcomponent',
            name='description_self',
            field=models.TextField(blank=True, verbose_name='Описание'),
        ),
        migrations.AlterField(
            model_name='platformcomponent',
            name='url',
            field=models.URLField(blank=True, null=True, verbose_name='Ссылка на онлайн-расписание занятий'),
        ),
        migrations.AlterModelOptions(
            name='theme',
            options={'ordering': ['order']},
        ),
        migrations.AlterField(
            model_name='literarysourcescomponent',
            name='title',
            field=models.TextField(blank=True, null=True, verbose_name='Библиографическая ссылка'),
        ),
        migrations.AlterField(
            model_name='platformcomponent',
            name='description_self',
            field=models.TextField(blank=True, verbose_name='Описание'),
        ),
        migrations.AlterField(
            model_name='platformcomponent',
            name='url',
            field=models.URLField(blank=True, null=True, verbose_name='Ссылка на онлайн-расписание занятий'),
        ),
        migrations.AlterField(
            model_name='theme',
            name='content',
            field=models.ManyToManyField(to='complexes.Container'),
        ),
        migrations.AlterField(
            model_name='theme',
            name='title',
            field=models.CharField(db_index=True, max_length=64),
        ),
        migrations.AlterModelManagers(
            name='assignmentacademicgroup',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='cell',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='componentcomplex',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='container',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='literarysourcescomponent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='platformcomponent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='resourcecomponent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='traditionalsessioncomponent',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
    ]
