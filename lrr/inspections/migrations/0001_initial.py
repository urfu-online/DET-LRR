# Generated by Django 3.2.16 on 2022-11-01 20:00

import auto_prefetch
import django.contrib.postgres.fields.ranges
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django_better_admin_arrayfield.models.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcceptableIndicatorValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Последние обновление')),
                ('value', models.CharField(blank=True, max_length=256, null=True, verbose_name='Значение показателя')),
                ('entity', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='КУРС_ЭОР')),
                ('location', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Внеш_Внутр')),
                ('interaction', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Тип интерактивности (Автоматизированный/Не интерактивный/С участием преподавателя)')),
                ('compliance', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Соответствие содержанию дисциплины (Полностью/Частично)')),
                ('per_discipline', models.BooleanField(default=False, verbose_name='Для каждой дисциплины')),
                ('rating', models.DecimalField(blank=True, decimal_places=3, max_digits=4, null=True, verbose_name='Рейтинг')),
            ],
            options={
                'verbose_name': 'допустимое значение показателя',
                'verbose_name_plural': 'допустимые значения показателя',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=400, verbose_name='Название')),
                ('order', models.IntegerField(blank=True, null=True, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'категория',
                'verbose_name_plural': 'категории',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ExpertiseOpinion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Последние обновление')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Дата проведения экспертизы')),
                ('protocol', models.CharField(blank=True, max_length=424, null=True, verbose_name='№ Протокола учебно-методического совета института')),
                ('status', models.CharField(blank=True, choices=[('START', 'Начата'), ('IN_PROCESS', 'В процессе'), ('END', 'Завершена')], default='START', max_length=30, verbose_name='Состояние')),
            ],
            options={
                'verbose_name': 'экспертное заключение',
                'verbose_name_plural': 'экспертные заключения',
                'get_latest_by': 'date',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ExpertiseRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Последние обновление')),
                ('date', models.DateTimeField(blank=True, null=True, verbose_name='Дата заявки')),
                ('date_end', models.DateTimeField(blank=True, null=True, verbose_name='Срок действия статуса экспертизы')),
                ('file', models.FileField(blank=True, null=True, upload_to='upload/files', verbose_name='№ протокола комиссии по ресурсному обеспечению модулей и ЭО методического совета')),
                ('remarks', models.TextField(blank=True, verbose_name='Замечания и рекомендации комиссии')),
                ('status', models.CharField(choices=[('SUB_APP', 'подана заявка'), ('ON_EXPERTISE', 'на экспертизе'), ('ON_REVISION', 'на доработку'), ('ASSIGNED_STATUS', 'присвоен статус'), ('NOT_ASSIGNED_STATUS', 'не присвоен статус')], default='NOT_ASSIGNED_STATUS', max_length=30, verbose_name='Состояние заявки')),
                ('status_text', models.TextField(blank=True, null=True, verbose_name='Статус')),
                ('type', models.CharField(blank=True, choices=[('FULL', 'Полная'), ('COMPLIANCE_DISCIPLINE', 'На соответствие дисциплине')], max_length=30, null=True, verbose_name='Тип экспертизы')),
                ('quality_category', models.CharField(blank=True, choices=[('INNER', 'внутренний'), ('OUTER', 'внешний'), ('OUTSIDE', 'сторонний')], max_length=30, verbose_name='Категория качества')),
                ('interactive_category', models.CharField(blank=True, choices=[('NOT_INTERACTIVE', 'не интерактивный'), ('WITH_TEACHER_SUPPORT', 'с поддержкой преподавателя'), ('AUTO', 'автоматизированный')], max_length=30, verbose_name='Категория интерактивности')),
            ],
            options={
                'verbose_name': 'заявка',
                'verbose_name_plural': 'заявки',
                'get_latest_by': 'date',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ExpertiseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=400, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('template', models.CharField(blank=True, max_length=255, null=True, verbose_name='Template')),
            ],
            options={
                'verbose_name': 'вид экспертизы',
                'verbose_name_plural': 'виды экспертизы',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(null=True, verbose_name='Наименование показателя')),
                ('order', models.IntegerField(default=0, verbose_name='Порядок отображения')),
                ('type', models.CharField(choices=[('text', 'text (multiple line)'), ('short-text', 'short text (one line)'), ('radio', 'radio'), ('select', 'select'), ('select-multiple', 'Select Multiple'), ('select_image', 'Select Image'), ('integer', 'integer'), ('float', 'float'), ('date', 'date')], default='text', max_length=200, verbose_name='Type')),
                ('per_discipline', models.BooleanField(default=False, verbose_name='Для каждой дисциплины')),
                ('choices', models.TextField(blank=True, help_text='Поле выбора используется только в том случае, если тип вопроса\nесли тип вопроса - "радио", "выбор" или\n\'select multiple\' - список разделенных запятыми\nварианты этого вопроса .', null=True, verbose_name='Choices')),
            ],
            options={
                'verbose_name': 'показатель',
                'verbose_name_plural': 'показатели',
                'ordering': ('expertise_type', 'order'),
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='OpinionIndicator',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Последние обновление')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Update date')),
                ('body', models.TextField(blank=True, null=True, verbose_name='Content')),
            ],
            options={
                'verbose_name': 'показатель заключения',
                'verbose_name_plural': 'показатели заключения',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=1024, verbose_name='Наименование')),
                ('group', models.CharField(choices=[('qual', 'Категория качества контента ЭОР'), ('struct', 'Соответствие структуры и содержания ЭОР требованиям конкретных дисциплин ОП'), ('tech', 'Технологические возможности и сценарии функционирования ЭОР')], default='qual', max_length=6, verbose_name='Группа')),
            ],
            options={
                'verbose_name': 'статус',
                'verbose_name_plural': 'статусы',
            },
        ),
        migrations.CreateModel(
            name='TemporaryStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True, verbose_name='Тело статуса')),
                ('date', models.DateTimeField(blank=True, null=True, verbose_name='Дата выставления статуса')),
                ('expertise_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inspections.expertiserequest', verbose_name='Заявка')),
            ],
            options={
                'verbose_name': 'временный статус',
                'verbose_name_plural': 'временные статусы',
            },
        ),
        migrations.CreateModel(
            name='SummaryIndicator',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Создано')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Последние обновление')),
                ('entity', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='КУРС_ЭОР')),
                ('location', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Внеш_Внутр')),
                ('interaction', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Тип интерактивности (Автоматизированный/Не интерактивный/С участием преподавателя)')),
                ('compliance', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Соответствие содержанию дисциплины (Полностью/Частично)')),
                ('per_discipline', models.BooleanField(default=False, verbose_name='Для каждой дисциплины')),
                ('rating', models.DecimalField(blank=True, decimal_places=3, max_digits=4, null=True, verbose_name='Рейтинг')),
                ('have_conflicts', models.BooleanField(default=False, verbose_name='Имеются противоречия')),
                ('expertise_request', auto_prefetch.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inspections.expertiserequest', verbose_name='Заявка')),
                ('indicator', auto_prefetch.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inspections.indicator', verbose_name='Показатель')),
            ],
            options={
                'verbose_name': 'сводный показатель',
                'verbose_name_plural': 'сводные показатели',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='StatusRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allowed_values', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(blank=True, max_length=32, null=True), blank=True, null=True, size=None, verbose_name='Допустимые значения')),
                ('allowed_num_values', django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True, verbose_name='Диапазон допустимых числовых значений')),
                ('exclude_values', django_better_admin_arrayfield.models.fields.ArrayField(base_field=models.CharField(blank=True, max_length=32, null=True), blank=True, null=True, size=None, verbose_name='Исключаемые значения')),
                ('available', models.BooleanField(default=True, verbose_name='Используется')),
                ('indicator', auto_prefetch.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inspections.indicator', verbose_name='Показатель')),
                ('status', auto_prefetch.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requirements', to='inspections.status')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'prefetch_manager',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('prefetch_manager', django.db.models.manager.Manager()),
            ],
        ),
    ]
